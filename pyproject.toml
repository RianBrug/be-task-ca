[tool.poetry]
name = "be-task-ca"
version = "0.1.0"
description = ""
authors = ["Franz Hess <franz.hess@helu.io>"]
readme = "README.md"
packages = [{ include = "be_task_ca" }]

[tool.poetry.dependencies]
python = "^3.11"
sqlalchemy = "^2.0.11"
psycopg2-binary = "^2.9.6"
fastapi = "^0.95.1"
uvicorn = "^0.22.0"


[tool.poetry.group.dev.dependencies]
pydeps = "^1.12.2"
pytest = "^7.3.1"
flake8 = "^6.0.0"
flake8-bugbear = "^23.3.23"
flake8-pyproject = "^1.2.3"
cohesion = "^1.1.0"
black = "^23.3.0"
mypy = "^1.2.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
start = "scripts:start"
schema = "scripts:schema"
graph = "scripts:create_dependency_graph"
tests = "scripts:run_tests"
lint = "scripts:run_linter"
format = "scripts:auto_format"
typing = "scripts:check_types"

[tool.flake8]
per-file-ignores = [
    'api.py:B008',  # ignore Depends(get_db) warnings
    'model.py:H601',  # ignore low cohesion for data models
    'schema.py:H601',  # ignore low cohesion for schema classes
    'interfaces.py:H601',  # ignore low cohesion for interfaces
    'database.py:H601',  # ignore low cohesion for base classes
    'usecases.py:H601',  # ignore low cohesion for service classes
]
max-line-length = 88
count = true

[tool.mypy]
#plugins = "sqlalchemy.ext.mypy.plugin"
disable_error_code = [
    "call-arg",  # Ignore missing positional arguments in dataclass initialization
    "call-overload",  # Ignore overload matching errors with SQLAlchemy types
    "assignment",  # Ignore some SQLAlchemy type assignment issues
]

[tool.poetry.group.test.dependencies]
pytest = "^7.3.1"
httpx = "^0.24.0"